(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{429:function(t,a,e){"use strict";e.r(a);var s=e(19),n=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"fluid-快速上手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fluid-快速上手"}},[t._v("#")]),t._v(" Fluid 快速上手")]),t._v(" "),a("p",[t._v("本文档介绍了如何创建或使用 Kubernetes 集群环境，通过 Helm 完成 Fluid 安装部署，并使用 Fluid 创建数据集。")]),t._v(" "),a("h2",{attrs:{id:"前置需求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前置需求"}},[t._v("#")]),t._v(" 前置需求")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("Kubernetes 1.14+")]),t._v(" "),a("p",[t._v("如果你目前没有满足条件的 Kubernetes 环境, 那么我们推荐你选择官方认证的 Kubernetes 云服务, 通常情况下, 你仅需寥寥几步即可快速获得一个专属的 Kubernetes 环境, 以下列出了部分经过认证的 Kubernetes 云服务:")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.aliyun.com/product/kubernetes",target:"_blank",rel:"noopener noreferrer"}},[t._v("阿里云容器服务"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://aws.amazon.com/eks/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Amazon Elastic Kubernetes Service"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/aks/tutorial-kubernetes-deploy-cluster",target:"_blank",rel:"noopener noreferrer"}},[t._v("Azure Kubernetes Service"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://cloud.google.com/kubernetes-engine/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Google Kubernetes Engine"),a("OutboundLink")],1)])]),t._v(" "),a("blockquote",[a("p",[t._v("注意: 考虑到 Minikube 功能的局限性,我们不推荐使用 Minikube 进行接下来的步骤")])])]),t._v(" "),a("li",[a("p",[t._v("Kubectl 1.14+")]),t._v(" "),a("p",[t._v("请确保Kubectl已经正确配置使其能够与你的Kubernetes环境进行交互")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://helm.sh/docs/intro/install/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Helm 3"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("在接下来的步骤中, 将使用Helm 3进行 Fluid 的快速安装")])])]),t._v(" "),a("h2",{attrs:{id:"安装fluid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装fluid"}},[t._v("#")]),t._v(" 安装Fluid")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("创建命名空间")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ kubectl create ns fluid-system\n")])])])]),t._v(" "),a("li",[a("p",[t._v("从 Github 仓库"),a("a",{attrs:{href:"https://github.com/fluid-cloudnative/fluid/releases",target:"_blank",rel:"noopener noreferrer"}},[t._v("Release页面"),a("OutboundLink")],1),t._v("下载最新版本的Fluid")])]),t._v(" "),a("li",[a("p",[t._v("使用 Helm 安装 Fluid")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ helm "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" fluid fluid-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("version"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(".tgz\nNAME: fluid\nLAST DEPLOYED: Tue Jul  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v(":22:07 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),t._v("\nNAMESPACE: default\nSTATUS: deployed\nREVISION: "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nTEST SUITE: None\n")])])])]),t._v(" "),a("li",[a("p",[t._v("查看Fluid的运行状态")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ kubectl get po -n fluid-system\nNAME                                         READY   STATUS    RESTARTS   AGE\nalluxioruntime-controller-64948b68c9-zzsx2   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("/1     Running   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("          108s\ncsi-nodeplugin-fluid-2mfcr                   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("/2     Running   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("          108s\ncsi-nodeplugin-fluid-l7lv6                   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("/2     Running   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("          108s\ndataset-controller-5465c4bbf9-5ds5p          "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("/1     Running   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("          108s\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"创建dataset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建dataset"}},[t._v("#")]),t._v(" 创建dataset")]),t._v(" "),a("p",[t._v("Fluid提供了云原生的数据加速和管理能力，并抽象出了"),a("code",[t._v("数据集(Dataset)")]),t._v("概念方便用户管理，接下来将演示如何用 Fluid 创建一个数据集。")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("创建一个Dataset CRD对象，其中描述了数据集的来源。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ cat"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("EOF"),a("span",{pre:!0,attrs:{class:"token bash punctuation"}},[t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("dataset.yaml")]),t._v("\napiVersion: data.fluid.io/v1alpha1\nkind: Dataset\nmetadata:\n  name: demo\nspec:\n  mounts:\n    - mountPoint: https://mirrors.bit.edu.cn/apache/spark/\n      name: spark\nEOF")]),t._v("\n")])])]),a("p",[t._v("执行安装")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ kubectl create -f dataset.yaml\n")])])])]),t._v(" "),a("li",[a("p",[t._v("创建 "),a("code",[t._v("AlluxioRuntime")]),t._v(" CRD对象，用来描述支持这个数据集的 Runtime, 在这里我们使用"),a("a",{attrs:{href:"https://www.alluxio.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Alluxio"),a("OutboundLink")],1),t._v("作为其Runtime")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[t._v("$ cat<<EOF "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v("runtime.yaml\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" data.fluid.io/v1alpha1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" AlluxioRuntime\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" demo\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("replicas")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tieredstore")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("levels")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mediumtype")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" MEM\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("path")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" /dev/shm\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("quota")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 2Gi\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("high")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.95"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("low")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.7"')]),t._v("\nEOF\n")])])]),a("p",[t._v("使用"),a("code",[t._v("kubectl")]),t._v("完成创建")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ kubectl create -f runtime.yaml  \n")])])])]),t._v(" "),a("li",[a("p",[t._v("接下来，我们创建一个应用容器来使用该数据集，我们将多次访问同一数据，并比较访问时间来展示 Fluid 的加速效果。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ cat"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("EOF"),a("span",{pre:!0,attrs:{class:"token bash punctuation"}},[t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("app.yaml")]),t._v("\napiVersion: v1\nkind: Pod\nmetadata:\n  name: demo-app\nspec:\n  containers:\n    - name: demo\n      image: nginx\n      volumeMounts:\n        - mountPath: /data\n          name: demo\n  volumes:\n    - name: demo\n      persistentVolumeClaim:\n        claimName: demo\nEOF")]),t._v("\n")])])]),a("p",[t._v("使用"),a("code",[t._v("kubectl")]),t._v("完成创建")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ kubectl create -f app.yaml  \n")])])])]),t._v(" "),a("li",[a("p",[t._v("登录到应用容器中访问数据，初次访问会花费更长时间。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ kubectl "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" -it demo-app -- "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bash")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("du")]),t._v(" -sh /data/spark/spark-3.0.1/spark-3.0.1-bin-without-hadoop.tgz\n150M\t/data/spark/spark-3.0.1/spark-3.0.1-bin-without-hadoop.tgz\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("time")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cp")]),t._v(" /data/spark/spark-3.0.1/spark-3.0.1-bin-without-hadoop.tgz /dev/null\nreal\t0m13.171s\nuser\t0m0.002s\nsys\t0m0.028s\n")])])])]),t._v(" "),a("li",[a("p",[t._v("为了避免其他因素(比如 page cache )对结果造成影响，我们将删除之前的容器，新建相同的应用，尝试访问同样的文件。由于此时文件已经被 "),a("code",[t._v("Alluxio")]),t._v(" 缓存，可以看到第二次访问所需时间远小于第一次。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ kubectl delete -f app.yaml "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" kubectl create -f app.yaml\n$ kubectl "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" -it demo-app -- "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bash")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("time")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cp")]),t._v(" /data/spark/spark-3.0.1/spark-3.0.1-bin-without-hadoop.tgz /dev/null\nreal\t0m0.034s\nuser\t0m0.001s\nsys\t0m0.032s\n")])])])])]),t._v(" "),a("p",[t._v("到这里，我们简单地创建了一个数据集并实现了数据集的抽象管理与加速, 更多有关 Fluid 的更详细的信息, 请参考以下示例文档:")]),t._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/zh/samples/accelerate_data_accessing.html"}},[t._v("远程文件访问加速")])],1),t._v(" "),a("li",[a("RouterLink",{attrs:{to:"/zh/samples/data_co_locality.html"}},[t._v("数据缓存亲和性调度")])],1),t._v(" "),a("li",[a("RouterLink",{attrs:{to:"/zh/samples/machinelearning.html"}},[t._v("用Fluid加速机器学习训练")])],1)])])}),[],!1,null,null,null);a.default=n.exports}}]);